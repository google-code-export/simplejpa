#summary Getting Started with SimpleJPA
#labels Featured,Phase-Support

= Introduction =

Here's how to get started using SimpleJPA. 

= Dependencies =

Need the latest releases of (I'll try to package these up into the release if I can figure out the licensing compatability):

  * commons-lang - get all commons libs at http://commons.apache.org/downloads/index.html
  * commons-beanutils
  * commons-logging (jets3t)
  * commons-codec (jets3t)
  * Apache HttpClient (jets3t) - http://hc.apache.org/downloads.cgi 
  * typica - http://code.google.com/p/typica/
  * jets3t - http://jets3t.s3.amazonaws.com/downloads.html
  * cglib-nodep - http://sourceforge.net/project/showfiles.php?group_id=56933
  * ejb3-persistence-api - http://mirrors.ibiblio.org/pub/mirrors/maven2/org/hibernate/ejb3-persistence/1.0.2.GA/
  * scannotation - http://scannotation.sourceforge.net/
  * javassist (scannotation) - http://www.csg.is.titech.ac.jp/~chiba/javassist/
  * ehcache - as of SimpleJPA alpha 0.6 - http://ehcache.sourceforge.net/
  * Backport concurrent (ehcache) - http://dcl.mathcs.emory.edu/util/backport-util-concurrent

= Download SimpleJPA =

http://code.google.com/p/simplejpa/downloads/list

= Setup =

Create a file called simplejpa.properties and put on the classpath.
Add your Amazon access key and secret key like:

{{{
accessKey = AAAAAAAAAAAAAAAAAAAAAAA
secretKey = SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
}}}

For more configuration options, see [Configuration].

= Now the Code =

== Create an EntityManagerFactory ==
{{{
// Create EntityManagerFactory. This should be a global object that you reuse.
private static EntityManagerFactoryImpl factory = new EntityManagerFactoryImpl("persistenceUnitName", null);
}}}

== Get EntityManager's from the Factory ==

{{{
// Get an EntityManager from the factory. This is a short term object that you'll use for some processing then throw away
EntityManager em = factory.createEntityManager();
}}}

== Persisting an object ==

Lets create a very simple object to store. 
{{{
@Entity
public class MyTestObject {
    private String id;
    private String name;

    @Id
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }
   
    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

}
}}}

Now to persist it:

{{{
MyObject ob = new MyObject();
ob.setName("Scooby doo");
em.persist(ob);
}}}

That's it!

= Querying =

See [JPAQuery]

= Deleting =
{{{
MyObject ob...
em.remove(ob);
}}}

= Close the EntityManager when you're done =

This is done after you've completed a set of tasks, such as displaying a web page. It ensures that caches get cleaned up and no memory gets wasted.

{{{
em.close();
}}}

= Close the EntityManagerFactory before you shutdown your app =

{{{
factory.close();
}}}

= What Next? =

  * See all the [http://code.google.com/p/simplejpa/wiki/WhatsSupported JPA features currently supported].
  * Cast your EntityManager to SimpleEntityManager to get more advanced features like asynchronous operations.
  * Use our ready to go BaseClasses so you can write less code